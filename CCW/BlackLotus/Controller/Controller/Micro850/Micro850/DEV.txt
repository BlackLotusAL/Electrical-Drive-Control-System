(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB2 := ALL_ENABLE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (ALL_STATUS = 4) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
(* FB call: TON *)
TON_1(__EDTB1 AND MOTOR_ENABLE AND TIMER4_ENABLE, T#10000S) ;
TIMER4_MS := TON_1.ET ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB4 := ALL_ENABLE ;
IF __EDTB4 THEN
(* Operator output on : = with __EDTB3 *)
__EDTB3 := (ALL_STATUS = 4) ;
ELSE
__EDTB3 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB3 ;
__EDTB5 := __EDTB3 AND MOTOR_ENABLE AND TIMER4_ENABLE ;
IF __EDTB5 THEN
TIMER4_REAL := ANY_TO_REAL(TIMER4_MS) ;
END_IF ;
__MO_ANY_TO_REAL_1 := __EDTB5 ;
__EDTB6 := __EDTB5 ;
IF __EDTB6 THEN
TIMER4_S := (TIMER4_REAL / 1000.0) ;
END_IF ;
__MO_DIV_1 := __EDTB6 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB8 := ALL_ENABLE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (ALL_STATUS = 4) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB7 ;
__EDTB10 := __EDTB7 ;
IF __EDTB10 THEN
(* Operator output on : > with __EDTB9 *)
__EDTB9 := (POS_FEEDBACK > ARRIVE_START) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB9 ;
__EDTB12 := __EDTB9 ;
IF __EDTB12 THEN
(* Operator output on : < with __EDTB11 *)
__EDTB11 := (POS_FEEDBACK < ARRIVE_END) ;
ELSE
__EDTB11 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB11 ;
__EDTB13 := __EDTB11 ;
IF __EDTB13 THEN
TIMER4_ENABLE := (  TRUE) ;
END_IF ;
__MO_1GAIN_1 := __EDTB13 ;
__EDTB14 := __EDTB13 ;
__EDTB16 := __EDTB7 ;
IF __EDTB16 THEN
(* Operator output on : < with __EDTB15 *)
__EDTB15 := (POS_FEEDBACK < ARRIVE_START) ;
ELSE
__EDTB15 := FALSE ;
END_IF ;
__MO_LESS_2 := __EDTB15 ;
__EDTB17 := __EDTB15 ;
IF __EDTB17 THEN
TIMER4_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_2 := __EDTB17 ;
__EDTB18 := __EDTB17 ;
__EDTB20 := __EDTB7 ;
IF __EDTB20 THEN
(* Operator output on : > with __EDTB19 *)
__EDTB19 := (POS_FEEDBACK > ARRIVE_END) ;
ELSE
__EDTB19 := FALSE ;
END_IF ;
__MO_GREAT_2 := __EDTB19 ;
__EDTB21 := __EDTB19 ;
IF __EDTB21 THEN
TIMER4_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_3 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
__EDTB23 := (__EDTB18 OR __EDTB22) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB25 := ALL_ENABLE ;
IF __EDTB25 THEN
(* Operator output on : = with __EDTB24 *)
__EDTB24 := (ALL_STATUS = 4) ;
ELSE
__EDTB24 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB24 ;
__EDTB26 := __EDTB24 ;
IF __EDTB26 THEN
POS_FEEDBACK := (POS_MOVE + POS_COMP) ;
END_IF ;
__MO_PLUS_1 := __EDTB26 ;
__EDTB27 := __EDTB26 ;
IF __EDTB27 THEN
POS_ERROR := (POS_END - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_1 := __EDTB27 ;
__EDTB28 := __EDTB27 ;
IF __EDTB28 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_1 := __EDTB28 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB30 := ALL_ENABLE ;
IF __EDTB30 THEN
(* Operator output on : = with __EDTB29 *)
__EDTB29 := (ALL_STATUS = 4) ;
ELSE
__EDTB29 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB29 ;
__EDTB32 := __EDTB29 ;
IF __EDTB32 THEN
(* Operator output on : > with __EDTB31 *)
__EDTB31 := (POS_ERROR > 0.0) ;
ELSE
__EDTB31 := FALSE ;
END_IF ;
__MO_GREAT_3 := __EDTB31 ;
__EDTB33 := __EDTB31 ;
IF __EDTB33 THEN
MOTOR_ROTATEDIRECTION := (  FALSE) ;
END_IF ;
__MO_1GAIN_4 := __EDTB33 ;
__EDTB34 := __EDTB33 ;
__EDTB36 := __EDTB29 ;
IF __EDTB36 THEN
(* Operator output on : < with __EDTB35 *)
__EDTB35 := (POS_ERROR < 0.0) ;
ELSE
__EDTB35 := FALSE ;
END_IF ;
__MO_LESS_3 := __EDTB35 ;
__EDTB37 := __EDTB35 ;
IF __EDTB37 THEN
MOTOR_ROTATEDIRECTION := (  TRUE) ;
END_IF ;
__MO_1GAIN_5 := __EDTB37 ;
__EDTB38 := __EDTB37 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB40 := ALL_ENABLE ;
IF __EDTB40 THEN
(* Operator output on : = with __EDTB39 *)
__EDTB39 := (ALL_STATUS = 4) ;
ELSE
__EDTB39 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB39 ;
__EDTB42 := __EDTB39 ;
IF __EDTB42 THEN
(* Operator output on : >= with __EDTB41 *)
__EDTB41 := (POS_ERROR_ABS >= 3.0) ;
ELSE
__EDTB41 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB41 ;
__EDTB43 := __EDTB41 ;
IF __EDTB43 THEN
POS_PID_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_6 := __EDTB43 ;
__EDTB44 := __EDTB43 ;
__EDTB46 := __EDTB39 ;
IF __EDTB46 THEN
(* Operator output on : < with __EDTB45 *)
__EDTB45 := (POS_ERROR_ABS < 3.0) ;
ELSE
__EDTB45 := FALSE ;
END_IF ;
__MO_LESS_4 := __EDTB45 ;
__EDTB47 := __EDTB45 ;
IF __EDTB47 THEN
POS_PID_ENABLE := (  TRUE) ;
END_IF ;
__MO_1GAIN_7 := __EDTB47 ;
__EDTB48 := __EDTB47 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB50 := ALL_ENABLE ;
IF __EDTB50 THEN
(* Operator output on : = with __EDTB49 *)
__EDTB49 := (ALL_STATUS = 4) ;
ELSE
__EDTB49 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB49 ;
__EDTB52 := __EDTB49 AND POS_PID_ENABLE ;
IF __EDTB52 THEN
(* Operator output on : <= with __EDTB51 *)
__EDTB51 := (POS_ERROR_ABS <= POS_ERROR_THRESHOLD) ;
ELSE
__EDTB51 := FALSE ;
END_IF ;
__MO_LESSEQUAL_1 := __EDTB51 ;
__EDTB53 := __EDTB51 ;
IF __EDTB53 THEN
MOTOR_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_8 := __EDTB53 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)

