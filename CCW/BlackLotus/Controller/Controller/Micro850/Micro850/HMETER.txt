(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB2 := ALL_ENABLE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (ALL_STATUS = 1) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
POS_FEEDBACK := (POS_MOVE + POS_COMP) ;
END_IF ;
__MO_PLUS_1 := __EDTB3 ;
__EDTB4 := __EDTB3 ;
IF __EDTB4 THEN
POS_SET := (  POS_END) ;
END_IF ;
__MO_1GAIN_1 := __EDTB4 ;
__EDTB5 := __EDTB4 ;
IF __EDTB5 THEN
POS_ERROR := (POS_END - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_1 := __EDTB5 ;
__EDTB6 := __EDTB5 ;
IF __EDTB6 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_1 := __EDTB6 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB8 := ALL_ENABLE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (ALL_STATUS = 1) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB7 ;
__EDTB10 := __EDTB7 ;
IF __EDTB10 THEN
(* Operator output on : > with __EDTB9 *)
__EDTB9 := (POS_ERROR > 0.0) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB9 ;
__EDTB11 := __EDTB9 ;
IF __EDTB11 THEN
MOTOR_ROTATEDIRECTION := (  FALSE) ;
END_IF ;
__MO_1GAIN_2 := __EDTB11 ;
__EDTB12 := __EDTB11 ;
__EDTB14 := __EDTB7 ;
IF __EDTB14 THEN
(* Operator output on : < with __EDTB13 *)
__EDTB13 := (POS_ERROR < 0.0) ;
ELSE
__EDTB13 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB13 ;
__EDTB15 := __EDTB13 ;
IF __EDTB15 THEN
MOTOR_ROTATEDIRECTION := (  TRUE) ;
END_IF ;
__MO_1GAIN_3 := __EDTB15 ;
__EDTB16 := __EDTB15 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB18 := ALL_ENABLE ;
IF __EDTB18 THEN
(* Operator output on : = with __EDTB17 *)
__EDTB17 := (ALL_STATUS = 1) ;
ELSE
__EDTB17 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB17 ;
__EDTB20 := __EDTB17 ;
IF __EDTB20 THEN
(* Operator output on : >= with __EDTB19 *)
__EDTB19 := (POS_ERROR_ABS >= POS_PID_THRESHOLD) ;
ELSE
__EDTB19 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB19 ;
__EDTB21 := __EDTB19 ;
IF __EDTB21 THEN
POS_PID_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_4 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
IF __EDTB22 THEN
FREQUENCY_SET := (  40.0) ;
END_IF ;
__MO_1GAIN_5 := __EDTB22 ;
__EDTB23 := __EDTB22 ;
__EDTB25 := __EDTB17 ;
IF __EDTB25 THEN
(* Operator output on : < with __EDTB24 *)
__EDTB24 := (POS_ERROR_ABS < POS_PID_THRESHOLD) ;
ELSE
__EDTB24 := FALSE ;
END_IF ;
__MO_LESS_2 := __EDTB24 ;
__EDTB26 := __EDTB24 ;
IF __EDTB26 THEN
POS_PID_ENABLE := (  TRUE) ;
END_IF ;
__MO_1GAIN_6 := __EDTB26 ;
__EDTB27 := __EDTB26 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB29 := ALL_ENABLE ;
IF __EDTB29 THEN
(* Operator output on : = with __EDTB28 *)
__EDTB28 := (ALL_STATUS = 1) ;
ELSE
__EDTB28 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB28 ;
__EDTB31 := __EDTB28 AND POS_PID_ENABLE ;
IF __EDTB31 THEN
(* Operator output on : <= with __EDTB30 *)
__EDTB30 := (POS_ERROR_ABS <= POS_STOP_THRESHOLD) ;
ELSE
__EDTB30 := FALSE ;
END_IF ;
__MO_LESSEQUAL_1 := __EDTB30 ;
__EDTB32 := __EDTB30 ;
IF __EDTB32 THEN
MOTOR_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_7 := __EDTB32 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)

