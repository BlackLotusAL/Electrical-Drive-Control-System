(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB2 := ALL_ENABLE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (ALL_STATUS = 3) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
POS_FEEDBACK := (POS_MOVE + POS_COMP) ;
END_IF ;
__MO_PLUS_1 := __EDTB3 ;
__EDTB5 := __EDTB3 ;
IF __EDTB5 THEN
(* Operator output on : = with __EDTB4 *)
__EDTB4 := (HURDLE_STATUS = 1) ;
ELSE
__EDTB4 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB4 ;
__EDTB6 := __EDTB4 ;
IF __EDTB6 THEN
POS_SET := (  HURDLE_POS1) ;
END_IF ;
__MO_1GAIN_1 := __EDTB6 ;
__EDTB7 := __EDTB6 ;
IF __EDTB7 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_1 := __EDTB7 ;
__EDTB8 := __EDTB7 ;
IF __EDTB8 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_1 := __EDTB8 ;
__EDTB10 := __EDTB8 ;
IF __EDTB10 THEN
(* Operator output on : < with __EDTB9 *)
__EDTB9 := (POS_FEEDBACK < HURDLE_POS1) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB9 ;
__EDTB12 := __EDTB9 ;
IF __EDTB12 THEN
(* Operator output on : > with __EDTB11 *)
__EDTB11 := (POS_ERROR_ABS > CHANGESPEED_THRESHOLD) ;
ELSE
__EDTB11 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB11 ;
__EDTB13 := __EDTB11 ;
IF __EDTB13 THEN
SPEED_SET := (  HURDLE_SPEED4) ;
END_IF ;
__MO_1GAIN_2 := __EDTB13 ;
__EDTB14 := __EDTB13 ;
__EDTB16 := __EDTB8 ;
IF __EDTB16 THEN
(* Operator output on : <= with __EDTB15 *)
__EDTB15 := (POS_ERROR_ABS <= CHANGESPEED_THRESHOLD) ;
ELSE
__EDTB15 := FALSE ;
END_IF ;
__MO_LESSEQUAL_1 := __EDTB15 ;
__EDTB17 := __EDTB15 ;
IF __EDTB17 THEN
SPEED_SET := (  HURDLE_SPEED1) ;
END_IF ;
__MO_1GAIN_3 := __EDTB17 ;
__EDTB18 := __EDTB17 ;
__EDTB20 := __EDTB8 ;
IF __EDTB20 THEN
(* Operator output on : <= with __EDTB19 *)
__EDTB19 := (POS_ERROR_ABS <= GETSPEED_THRESHOLD) ;
ELSE
__EDTB19 := FALSE ;
END_IF ;
__MO_LESSEQUAL_2 := __EDTB19 ;
__EDTB21 := __EDTB19 ;
IF __EDTB21 THEN
HURDLE_PASS_SPEED1 := (  SPEED_FEEDBACK_ABS) ;
END_IF ;
__MO_1GAIN_4 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
IF __EDTB22 THEN
HURDLE_STATUS := (  2) ;
END_IF ;
__MO_1GAIN_5 := __EDTB22 ;
__EDTB23 := __EDTB22 ;
__EDTB24 := (__EDTB18 OR __EDTB23) ;
__EDTB25 := (__EDTB14 OR __EDTB24) ;
__EDTB27 := __EDTB3 ;
IF __EDTB27 THEN
(* Operator output on : = with __EDTB26 *)
__EDTB26 := (HURDLE_STATUS = 2) ;
ELSE
__EDTB26 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB26 ;
__EDTB28 := __EDTB26 ;
IF __EDTB28 THEN
POS_SET := (  HURDLE_POS2) ;
END_IF ;
__MO_1GAIN_6 := __EDTB28 ;
__EDTB29 := __EDTB28 ;
IF __EDTB29 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_2 := __EDTB29 ;
__EDTB30 := __EDTB29 ;
IF __EDTB30 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_2 := __EDTB30 ;
__EDTB32 := __EDTB30 ;
IF __EDTB32 THEN
(* Operator output on : < with __EDTB31 *)
__EDTB31 := (POS_FEEDBACK < HURDLE_POS2) ;
ELSE
__EDTB31 := FALSE ;
END_IF ;
__MO_LESS_2 := __EDTB31 ;
__EDTB34 := __EDTB31 ;
IF __EDTB34 THEN
(* Operator output on : > with __EDTB33 *)
__EDTB33 := (POS_ERROR_ABS > CHANGESPEED_THRESHOLD) ;
ELSE
__EDTB33 := FALSE ;
END_IF ;
__MO_GREAT_2 := __EDTB33 ;
__EDTB35 := __EDTB33 ;
IF __EDTB35 THEN
SPEED_SET := (  HURDLE_SPEED4) ;
END_IF ;
__MO_1GAIN_7 := __EDTB35 ;
__EDTB36 := __EDTB35 ;
__EDTB38 := __EDTB30 ;
IF __EDTB38 THEN
(* Operator output on : <= with __EDTB37 *)
__EDTB37 := (POS_ERROR_ABS <= CHANGESPEED_THRESHOLD) ;
ELSE
__EDTB37 := FALSE ;
END_IF ;
__MO_LESSEQUAL_3 := __EDTB37 ;
__EDTB39 := __EDTB37 ;
IF __EDTB39 THEN
SPEED_SET := (  HURDLE_SPEED2) ;
END_IF ;
__MO_1GAIN_8 := __EDTB39 ;
__EDTB40 := __EDTB39 ;
__EDTB42 := __EDTB30 ;
IF __EDTB42 THEN
(* Operator output on : <= with __EDTB41 *)
__EDTB41 := (POS_ERROR_ABS <= GETSPEED_THRESHOLD) ;
ELSE
__EDTB41 := FALSE ;
END_IF ;
__MO_LESSEQUAL_4 := __EDTB41 ;
__EDTB43 := __EDTB41 ;
IF __EDTB43 THEN
HURDLE_PASS_SPEED2 := (  SPEED_FEEDBACK_ABS) ;
END_IF ;
__MO_1GAIN_9 := __EDTB43 ;
__EDTB44 := __EDTB43 ;
IF __EDTB44 THEN
HURDLE_STATUS := (  3) ;
END_IF ;
__MO_1GAIN_10 := __EDTB44 ;
__EDTB45 := __EDTB44 ;
__EDTB46 := (__EDTB40 OR __EDTB45) ;
__EDTB47 := (__EDTB36 OR __EDTB46) ;
__EDTB49 := __EDTB3 ;
IF __EDTB49 THEN
(* Operator output on : = with __EDTB48 *)
__EDTB48 := (HURDLE_STATUS = 3) ;
ELSE
__EDTB48 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB48 ;
__EDTB50 := __EDTB48 ;
IF __EDTB50 THEN
POS_SET := (  HURDLE_POS3) ;
END_IF ;
__MO_1GAIN_11 := __EDTB50 ;
__EDTB51 := __EDTB50 ;
IF __EDTB51 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_3 := __EDTB51 ;
__EDTB52 := __EDTB51 ;
IF __EDTB52 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_3 := __EDTB52 ;
__EDTB54 := __EDTB52 ;
IF __EDTB54 THEN
(* Operator output on : < with __EDTB53 *)
__EDTB53 := (POS_FEEDBACK < HURDLE_POS3) ;
ELSE
__EDTB53 := FALSE ;
END_IF ;
__MO_LESS_3 := __EDTB53 ;
__EDTB56 := __EDTB53 ;
IF __EDTB56 THEN
(* Operator output on : > with __EDTB55 *)
__EDTB55 := (POS_ERROR_ABS > CHANGESPEED_THRESHOLD) ;
ELSE
__EDTB55 := FALSE ;
END_IF ;
__MO_GREAT_3 := __EDTB55 ;
__EDTB57 := __EDTB55 ;
IF __EDTB57 THEN
SPEED_SET := (  HURDLE_SPEED4) ;
END_IF ;
__MO_1GAIN_12 := __EDTB57 ;
__EDTB58 := __EDTB57 ;
__EDTB60 := __EDTB52 ;
IF __EDTB60 THEN
(* Operator output on : <= with __EDTB59 *)
__EDTB59 := (POS_ERROR_ABS <= CHANGESPEED_THRESHOLD) ;
ELSE
__EDTB59 := FALSE ;
END_IF ;
__MO_LESSEQUAL_5 := __EDTB59 ;
__EDTB61 := __EDTB59 ;
IF __EDTB61 THEN
SPEED_SET := (  HURDLE_SPEED3) ;
END_IF ;
__MO_1GAIN_13 := __EDTB61 ;
__EDTB62 := __EDTB61 ;
__EDTB64 := __EDTB52 ;
IF __EDTB64 THEN
(* Operator output on : <= with __EDTB63 *)
__EDTB63 := (POS_ERROR_ABS <= GETSPEED_THRESHOLD) ;
ELSE
__EDTB63 := FALSE ;
END_IF ;
__MO_LESSEQUAL_6 := __EDTB63 ;
__EDTB65 := __EDTB63 ;
IF __EDTB65 THEN
HURDLE_PASS_SPEED3 := (  SPEED_FEEDBACK_ABS) ;
END_IF ;
__MO_1GAIN_14 := __EDTB65 ;
__EDTB66 := __EDTB65 ;
IF __EDTB66 THEN
HURDLE_STATUS := (  4) ;
END_IF ;
__MO_1GAIN_15 := __EDTB66 ;
__EDTB67 := __EDTB66 ;
__EDTB68 := (__EDTB62 OR __EDTB67) ;
__EDTB69 := (__EDTB58 OR __EDTB68) ;
__EDTB71 := __EDTB3 ;
IF __EDTB71 THEN
(* Operator output on : = with __EDTB70 *)
__EDTB70 := (HURDLE_STATUS = 4) ;
ELSE
__EDTB70 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB70 ;
__EDTB72 := __EDTB70 ;
IF __EDTB72 THEN
POS_SET := (  HURDLE_POS4) ;
END_IF ;
__MO_1GAIN_16 := __EDTB72 ;
__EDTB73 := __EDTB72 ;
IF __EDTB73 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_4 := __EDTB73 ;
__EDTB74 := __EDTB73 ;
IF __EDTB74 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_4 := __EDTB74 ;
__EDTB76 := __EDTB74 ;
IF __EDTB76 THEN
(* Operator output on : < with __EDTB75 *)
__EDTB75 := (POS_FEEDBACK < HURDLE_POS4) ;
ELSE
__EDTB75 := FALSE ;
END_IF ;
__MO_LESS_4 := __EDTB75 ;
__EDTB78 := __EDTB75 ;
IF __EDTB78 THEN
(* Operator output on : > with __EDTB77 *)
__EDTB77 := (POS_ERROR_ABS > POS_ERROR_THRESHOLD) ;
ELSE
__EDTB77 := FALSE ;
END_IF ;
__MO_GREAT_4 := __EDTB77 ;
__EDTB79 := __EDTB77 ;
IF __EDTB79 THEN
SPEED_SET := (  HURDLE_SPEED4) ;
END_IF ;
__MO_1GAIN_17 := __EDTB79 ;
__EDTB80 := __EDTB79 ;
__EDTB82 := __EDTB74 ;
IF __EDTB82 THEN
(* Operator output on : <= with __EDTB81 *)
__EDTB81 := (POS_ERROR_ABS <= POS_ERROR_THRESHOLD) ;
ELSE
__EDTB81 := FALSE ;
END_IF ;
__MO_LESSEQUAL_7 := __EDTB81 ;
__EDTB83 := __EDTB81 ;
IF __EDTB83 THEN
HURDLE_STATUS := (  1) ;
END_IF ;
__MO_1GAIN_18 := __EDTB83 ;
__EDTB84 := __EDTB83 ;
IF __EDTB84 THEN
POS_SET := (  HURDLE_POS1) ;
END_IF ;
__MO_1GAIN_19 := __EDTB84 ;
__EDTB85 := __EDTB84 ;
IF __EDTB85 THEN
MOTOR_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_20 := __EDTB85 ;
__EDTB86 := __EDTB85 ;
__EDTB87 := (__EDTB80 OR __EDTB86) ;
__EDTB88 := (__EDTB69 OR __EDTB87) ;
__EDTB89 := (__EDTB47 OR __EDTB88) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB91 := ALL_ENABLE ;
IF __EDTB91 THEN
(* Operator output on : = with __EDTB90 *)
__EDTB90 := (ALL_STATUS = 3) ;
ELSE
__EDTB90 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB90 ;
__EDTB93 := __EDTB90 ;
IF __EDTB93 THEN
(* Operator output on : > with __EDTB92 *)
__EDTB92 := (POS_ERROR > 0.0) ;
ELSE
__EDTB92 := FALSE ;
END_IF ;
__MO_GREAT_5 := __EDTB92 ;
__EDTB94 := __EDTB92 ;
IF __EDTB94 THEN
MOTOR_ROTATEDIRECTION := (  FALSE) ;
END_IF ;
__MO_1GAIN_21 := __EDTB94 ;
__EDTB95 := __EDTB94 ;
__EDTB97 := __EDTB90 ;
IF __EDTB97 THEN
(* Operator output on : < with __EDTB96 *)
__EDTB96 := (POS_ERROR < 0.0) ;
ELSE
__EDTB96 := FALSE ;
END_IF ;
__MO_LESS_5 := __EDTB96 ;
__EDTB98 := __EDTB96 ;
IF __EDTB98 THEN
MOTOR_ROTATEDIRECTION := (  TRUE) ;
END_IF ;
__MO_1GAIN_22 := __EDTB98 ;
__EDTB99 := __EDTB98 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __EDTB57 *)
(* __EDTB58 *)
(* __EDTB59 *)
(* __EDTB60 *)
(* __EDTB61 *)
(* __EDTB62 *)
(* __EDTB63 *)
(* __EDTB64 *)
(* __EDTB65 *)
(* __EDTB66 *)
(* __EDTB67 *)
(* __EDTB68 *)
(* __EDTB69 *)
(* __EDTB70 *)
(* __EDTB71 *)
(* __EDTB72 *)
(* __EDTB73 *)
(* __EDTB74 *)
(* __EDTB75 *)
(* __EDTB76 *)
(* __EDTB77 *)
(* __EDTB78 *)
(* __EDTB79 *)
(* __EDTB80 *)
(* __EDTB81 *)
(* __EDTB82 *)
(* __EDTB83 *)
(* __EDTB84 *)
(* __EDTB85 *)
(* __EDTB86 *)
(* __EDTB87 *)
(* __EDTB88 *)
(* __EDTB89 *)
(* __EDTB90 *)
(* __EDTB91 *)
(* __EDTB92 *)
(* __EDTB93 *)
(* __EDTB94 *)
(* __EDTB95 *)
(* __EDTB96 *)
(* __EDTB97 *)
(* __EDTB98 *)
(* __EDTB99 *)

