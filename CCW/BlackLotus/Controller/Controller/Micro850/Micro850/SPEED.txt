(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB1 := ALL_ENABLE ;
IF __EDTB1 THEN
PROCESS := (  SPEED_FEEDBACK_ABS) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB2 := ALL_ENABLE ;
IF __EDTB2 THEN
SETPOINT := (  SPEED_SET) ;
END_IF ;
__MO_1GAIN_2 := __EDTB2 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB3 := ALL_ENABLE ;
IF __EDTB3 THEN
FEEDBACK := (  SPEED_FEEDBACK_ABS) ;
END_IF ;
__MO_1GAIN_3 := __EDTB3 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB4 := ALL_ENABLE ;
IF __EDTB4 THEN
GAINS.PROPORTIONALGAIN := (  SPEED_KP) ;
END_IF ;
__MO_1GAIN_4 := __EDTB4 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB5 := ALL_ENABLE ;
IF __EDTB5 THEN
GAINS.TIMEINTEGRAL := (  SPEED_TI) ;
END_IF ;
__MO_1GAIN_5 := __EDTB5 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB6 := ALL_ENABLE ;
IF __EDTB6 THEN
GAINS.TIMEDERIVATIVE := (  SPEED_TD) ;
END_IF ;
__MO_1GAIN_6 := __EDTB6 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB8 := ALL_ENABLE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (ALL_STATUS = 3) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB7 ;
__EDTB9 := __EDTB7 ;
__EDTB11 := ALL_ENABLE ;
IF __EDTB11 THEN
(* Operator output on : = with __EDTB10 *)
__EDTB10 := (ALL_STATUS = 4) ;
ELSE
__EDTB10 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB10 ;
__EDTB12 := __EDTB10 ;
__EDTB13 := (__EDTB9 OR __EDTB12) ;
IF __EDTB13 THEN
(* FB call: IPIDCONTROLLER *)
IPIDCONTROLLER_1(PROCESS, SETPOINT, FEEDBACK, AUTO, INITIALIZE, GAINS, AUTOTUNE, ATPARAMETERS, 0) ;
OUTPUT := IPIDCONTROLLER_1.Output ;
ABSOLUTEERROR := IPIDCONTROLLER_1.AbsoluteError ;
ATWARNING := IPIDCONTROLLER_1.ATWarning ;
OUTGAINS := IPIDCONTROLLER_1.OutGains ;
END_IF ;
__MO_IPIDCONTROLLER_1 := __EDTB13 ;
__EDTB14 := __EDTB13 ;
IF __EDTB14 THEN
FREQUENCY_SET_K := (OUTPUT * SPEED_2_FREQUENCY_K) ;
END_IF ;
__MO_MULT_1 := __EDTB14 ;
__EDTB15 := __EDTB14 ;
IF __EDTB15 THEN
FREQUENCY_SET_K_B := (FREQUENCY_SET_K + SPEED_2_FREQUENCY_B) ;
END_IF ;
__MO_PLUS_1 := __EDTB15 ;
__EDTB17 := __EDTB15 ;
IF __EDTB17 THEN
(* Operator output on : <= with __EDTB16 *)
__EDTB16 := (FREQUENCY_SET_K_B <= 50.0) ;
ELSE
__EDTB16 := FALSE ;
END_IF ;
__MO_LESSEQUAL_1 := __EDTB16 ;
__EDTB18 := __EDTB16 ;
IF __EDTB18 THEN
FREQUENCY_SET := (  FREQUENCY_SET_K_B) ;
END_IF ;
__MO_1GAIN_7 := __EDTB18 ;
__EDTB19 := __EDTB18 ;
__EDTB21 := __EDTB15 ;
IF __EDTB21 THEN
(* Operator output on : > with __EDTB20 *)
__EDTB20 := (FREQUENCY_SET_K_B > 50.0) ;
ELSE
__EDTB20 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB20 ;
__EDTB22 := __EDTB20 ;
IF __EDTB22 THEN
FREQUENCY_SET := (  40.0) ;
END_IF ;
__MO_1GAIN_8 := __EDTB22 ;
__EDTB23 := __EDTB22 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)

