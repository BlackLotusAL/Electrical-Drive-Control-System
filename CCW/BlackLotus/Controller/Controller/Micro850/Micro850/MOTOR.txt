(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB1 := ALL_ENABLE AND MOTOR_ENABLE ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
START := (  TRUE) ;
END_IF ;
__MO_1GAIN_1 := __EDTB2 ;
__EDTB3 := __EDTB2 ;
__EDTB4 := __EDTB1 ;
IF __EDTB4 THEN
STOP := (  FALSE) ;
END_IF ;
__MO_1GAIN_2 := __EDTB4 ;
__EDTB5 := __EDTB4 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB6 := ALL_ENABLE AND NOT(MOTOR_ENABLE) ;
__EDTB7 := __EDTB6 ;
IF __EDTB7 THEN
STOP := (  TRUE) ;
END_IF ;
__MO_1GAIN_3 := __EDTB7 ;
__EDTB8 := __EDTB7 ;
__EDTB9 := __EDTB6 ;
IF __EDTB9 THEN
START := (  FALSE) ;
END_IF ;
__MO_1GAIN_4 := __EDTB9 ;
__EDTB10 := __EDTB9 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB11 := MOTOR_ROTATEDIRECTION ;
IF __EDTB11 THEN
SETFWD := (  TRUE) ;
END_IF ;
__MO_1GAIN_5 := __EDTB11 ;
__EDTB12 := __EDTB11 ;
__EDTB13 := MOTOR_ROTATEDIRECTION ;
IF __EDTB13 THEN
SETREV := (  FALSE) ;
END_IF ;
__MO_1GAIN_6 := __EDTB13 ;
__EDTB14 := __EDTB13 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB15 := NOT(MOTOR_ROTATEDIRECTION) ;
IF __EDTB15 THEN
SETREV := (  TRUE) ;
END_IF ;
__MO_1GAIN_7 := __EDTB15 ;
__EDTB16 := __EDTB15 ;
__EDTB17 := NOT(MOTOR_ROTATEDIRECTION) ;
IF __EDTB17 THEN
SETFWD := (  FALSE) ;
END_IF ;
__MO_1GAIN_8 := __EDTB17 ;
__EDTB18 := __EDTB17 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB19 := ALL_ENABLE ;
IF __EDTB19 THEN
SPEEDREF := (  FREQUENCY_SET) ;
END_IF ;
__MO_1GAIN_9 := __EDTB19 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB20 := ALL_ENABLE ;
IF __EDTB20 THEN
FREQUENCY_FEEDBACK := (  SPEEDFEEDBACK) ;
END_IF ;
__MO_1GAIN_10 := __EDTB20 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
(* FB call: RA_PFx_ENET_STS_CMD *)
RA_PFx_ENET_STS_CMD_1(ALL_ENABLE, IPADDRESS, UPDATERATE_MS, ENETCTRLTO_SEC, STOP, START, JOG, CLRFAULT, SETFWD, SETREV, SPEEDREF, ACCELTIME1, DECELTIME1) ;
SPEEDFEEDBACK := RA_PFx_ENET_STS_CMD_1.SpeedFeedback ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
(* FB call: TON *)
TON_1(ALL_ENABLE AND MOTOR_ENABLE, T#10000S) ;
TIMER0_MS := TON_1.ET ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB21 := ALL_ENABLE AND MOTOR_ENABLE ;
IF __EDTB21 THEN
TIMER0_REAL := ANY_TO_REAL(TIMER0_MS) ;
END_IF ;
__MO_ANY_TO_REAL_1 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
IF __EDTB22 THEN
TIMER0_S := (TIMER0_REAL / 1000.0) ;
END_IF ;
__MO_DIV_1 := __EDTB22 ;
__EDTB23 := __EDTB22 ;
IF __EDTB23 THEN
ALL_TIME := (  TIMER0_S) ;
END_IF ;
__MO_1GAIN_11 := __EDTB23 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)

