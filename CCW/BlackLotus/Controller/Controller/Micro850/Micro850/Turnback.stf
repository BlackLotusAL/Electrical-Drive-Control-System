PROGRAM Turnback
#info= QLD
BOF


(**)

SOR  [0,1] (**) (**)  FB  [1,0] (*=*) (*16*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  
 BST  FB  [4,0] (*=*) (*17*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*1*) (**) ; (*o1:*)(**) (**) )  FB  [7,0] (*1 gain*) (*18*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Pos1*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Set*) (**) )  FB  [10,0] (*-*) (*43*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Set*) (**)  , (*i2:*)(*Pos_Feedback*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Error*) (**) )  FB  [13,0] (*ABS*) (*44*) ( (*EN:EN*)(**) (**)  , (*IN:IN*)(*Pos_Error*) (**) ; (*ENO:ENO*)(**) (**)  , (*ABS:Q*)(*Pos_Error_Abs*) (**) )  FB  [16,0] (*<=*) (*19*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Error_Abs*) (**)  , (*i2:*)(*Pos_Error_Threshold*) (**) ; (*o1:*)(**) (**) )  FB  [19,0] (*1 gain*) (*20*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*2*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Status*) (**) )
   NXB  
 BST  FB  [4,3] (*=*) (*21*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [7,3] (*1 gain*) (*22*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Pos2*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Set*) (**) )  FB  [10,3] (*-*) (*43*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Set*) (**)  , (*i2:*)(*Pos_Feedback*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Error*) (**) )  FB  [13,3] (*ABS*) (*44*) ( (*EN:EN*)(**) (**)  , (*IN:IN*)(*Pos_Error*) (**) ; (*ENO:ENO*)(**) (**)  , (*ABS:Q*)(*Pos_Error_Abs*) (**) )  FB  [16,3] (*<=*) (*23*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Error_Abs*) (**)  , (*i2:*)(*Pos_Error_Threshold*) (**) ; (*o1:*)(**) (**) )  FB  [19,3] (*1 gain*) (*24*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*3*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Status*) (**) )
   NXB  
 BST  FB  [4,6] (*=*) (*25*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*3*) (**) ; (*o1:*)(**) (**) )  FB  [7,6] (*1 gain*) (*26*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Pos3*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Set*) (**) )  FB  [10,6] (*-*) (*43*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Set*) (**)  , (*i2:*)(*Pos_Feedback*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Error*) (**) )  FB  [13,6] (*ABS*) (*44*) ( (*EN:EN*)(**) (**)  , (*IN:IN*)(*Pos_Error*) (**) ; (*ENO:ENO*)(**) (**)  , (*ABS:Q*)(*Pos_Error_Abs*) (**) )  FB  [16,6] (*<=*) (*27*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Error_Abs*) (**)  , (*i2:*)(*Pos_Error_Threshold*) (**) ; (*o1:*)(**) (**) )  FB  [19,6] (*1 gain*) (*28*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*0*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Status*) (**) )
   NXB  FB  [4,9] (*=*) (*29*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*0*) (**) ; (*o1:*)(**) (**) )  FB  [7,9] (*1 gain*) (*30*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Init*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Set*) (**) )  FB  [10,9] (*-*) (*43*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Set*) (**)  , (*i2:*)(*Pos_Feedback*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Error*) (**) )  FB  [13,9] (*ABS*) (*44*) ( (*EN:EN*)(**) (**)  , (*IN:IN*)(*Pos_Error*) (**) ; (*ENO:ENO*)(**) (**)  , (*ABS:Q*)(*Pos_Error_Abs*) (**) )  FB  [16,9] (*<=*) (*27*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Pos_Error_Abs*) (**)  , (*i2:*)(*Pos_Error_Threshold*) (**) ; (*o1:*)(**) (**) )  FB  [19,9] (*1 gain*) (*28*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*1*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Status*) (**) )  FB  [22,9] (*1 gain*) (*35*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Pos1*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Pos_Set*) (**) )  FB  [25,9] (*1 gain*) (*33*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*False*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Motor_Enable*) (**) )
 BND

 BND

 BND

EOR [28,0]


(**)

SOR  [0,14] (**) (**)  XIC  [1,0] (*All_Enable*) (**)  FB  [2,0] (*=*) (*1*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [5,0] (*=*) (*14*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*1*) (**) ; (*o1:*)(**) (**) )  XIC  [8,0] (*Motor_Enable*) (**)  FB  [9,0] (*TON*) (*TON_1*) ( (*IN:IN*)(**) (**)  , (*PT:PT*)(*T#10000s*) (**) ; (*Q:Q*)(**) (**)  , (*ET:ET*)(*Timer1_ms*) (**) )
EOR [12,0]


(**)

SOR  [0,18] (**) (**)  XIC  [1,0] (*All_Enable*) (**)  FB  [2,0] (*=*) (*1*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [5,0] (*=*) (*14*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*1*) (**) ; (*o1:*)(**) (**) )  XIC  [8,0] (*Motor_Enable*) (**)  FB  [9,0] (*ANY_TO_REAL*) (*10*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer1_ms*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Timer1_Real*) (**) )  FB  [12,0] (*/*) (*11*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer1_Real*) (**)  , (*i2:*)(*1000.0*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Timer1_s*) (**) )  FB  [15,0] (*1 gain*) (*34*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer1_s*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Time1*) (**) )
EOR [18,0]


(**)

SOR  [0,22] (**) (**)  XIC  [1,0] (*All_Enable*) (**)  FB  [2,0] (*=*) (*1*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [5,0] (*=*) (*14*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  XIC  [8,0] (*Motor_Enable*) (**)  FB  [9,0] (*TON*) (*TON_2*) ( (*IN:IN*)(**) (**)  , (*PT:PT*)(*T#10000s*) (**) ; (*Q:Q*)(**) (**)  , (*ET:ET*)(*Timer2_ms*) (**) )
EOR [12,0]


(**)

SOR  [0,26] (**) (**)  XIC  [1,0] (*All_Enable*) (**)  FB  [2,0] (*=*) (*1*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [5,0] (*=*) (*14*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  XIC  [8,0] (*Motor_Enable*) (**)  FB  [9,0] (*ANY_TO_REAL*) (*10*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer2_ms*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Timer2_Real*) (**) )  FB  [12,0] (*/*) (*11*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer2_Real*) (**)  , (*i2:*)(*1000.0*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Timer2_s*) (**) )  FB  [15,0] (*1 gain*) (*34*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer2_s*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Time2*) (**) )
EOR [18,0]


(**)

SOR  [0,30] (**) (**)  XIC  [1,0] (*All_Enable*) (**)  FB  [2,0] (*=*) (*1*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [5,0] (*=*) (*14*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*3*) (**) ; (*o1:*)(**) (**) )  XIC  [8,0] (*Motor_Enable*) (**)  FB  [9,0] (*TON*) (*TON_3*) ( (*IN:IN*)(**) (**)  , (*PT:PT*)(*T#10000s*) (**) ; (*Q:Q*)(**) (**)  , (*ET:ET*)(*Timer3_ms*) (**) )
EOR [12,0]


(**)

SOR  [0,34] (**) (**)  XIC  [1,0] (*All_Enable*) (**)  FB  [2,0] (*=*) (*1*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*All_Status*) (**)  , (*i2:*)(*2*) (**) ; (*o1:*)(**) (**) )  FB  [5,0] (*=*) (*14*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Turnback_Status*) (**)  , (*i2:*)(*3*) (**) ; (*o1:*)(**) (**) )  XIC  [8,0] (*Motor_Enable*) (**)  FB  [9,0] (*ANY_TO_REAL*) (*10*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer3_ms*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Timer3_Real*) (**) )  FB  [12,0] (*/*) (*11*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer3_Real*) (**)  , (*i2:*)(*1000.0*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Timer3_s*) (**) )  FB  [15,0] (*1 gain*) (*34*) ( (*EN:EN*)(**) (**)  , (*i1:*)(*Timer3_s*) (**) ; (*ENO:ENO*)(**) (**)  , (*o1:*)(*Turnback_Time3*) (**) )
EOR [18,0]
EOF
#end_info
#info= ID_MAX
NextId=35
#end_info
END_PROGRAM