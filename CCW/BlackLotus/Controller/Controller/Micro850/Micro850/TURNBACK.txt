(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB2 := ALL_ENABLE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (ALL_STATUS = 2) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
POS_FEEDBACK := (POS_MOVE + POS_COMP) ;
END_IF ;
__MO_PLUS_1 := __EDTB3 ;
__EDTB5 := __EDTB3 ;
IF __EDTB5 THEN
(* Operator output on : = with __EDTB4 *)
__EDTB4 := (TURNBACK_STATUS = 1) ;
ELSE
__EDTB4 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB4 ;
__EDTB6 := __EDTB4 ;
IF __EDTB6 THEN
POS_SET := (  TURNBACK_POS1) ;
END_IF ;
__MO_1GAIN_1 := __EDTB6 ;
__EDTB7 := __EDTB6 ;
IF __EDTB7 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_1 := __EDTB7 ;
__EDTB8 := __EDTB7 ;
IF __EDTB8 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_1 := __EDTB8 ;
__EDTB10 := __EDTB8 ;
IF __EDTB10 THEN
(* Operator output on : <= with __EDTB9 *)
__EDTB9 := (POS_ERROR_ABS <= POS_ERROR_THRESHOLD) ;
ELSE
__EDTB9 := FALSE ;
END_IF ;
__MO_LESSEQUAL_1 := __EDTB9 ;
__EDTB11 := __EDTB9 ;
IF __EDTB11 THEN
TURNBACK_STATUS := (  2) ;
END_IF ;
__MO_1GAIN_2 := __EDTB11 ;
__EDTB12 := __EDTB11 ;
__EDTB14 := __EDTB3 ;
IF __EDTB14 THEN
(* Operator output on : = with __EDTB13 *)
__EDTB13 := (TURNBACK_STATUS = 2) ;
ELSE
__EDTB13 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB13 ;
__EDTB15 := __EDTB13 ;
IF __EDTB15 THEN
POS_SET := (  TURNBACK_POS2) ;
END_IF ;
__MO_1GAIN_3 := __EDTB15 ;
__EDTB16 := __EDTB15 ;
IF __EDTB16 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_2 := __EDTB16 ;
__EDTB17 := __EDTB16 ;
IF __EDTB17 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_2 := __EDTB17 ;
__EDTB19 := __EDTB17 ;
IF __EDTB19 THEN
(* Operator output on : <= with __EDTB18 *)
__EDTB18 := (POS_ERROR_ABS <= POS_ERROR_THRESHOLD) ;
ELSE
__EDTB18 := FALSE ;
END_IF ;
__MO_LESSEQUAL_2 := __EDTB18 ;
__EDTB20 := __EDTB18 ;
IF __EDTB20 THEN
TURNBACK_STATUS := (  3) ;
END_IF ;
__MO_1GAIN_4 := __EDTB20 ;
__EDTB21 := __EDTB20 ;
__EDTB23 := __EDTB3 ;
IF __EDTB23 THEN
(* Operator output on : = with __EDTB22 *)
__EDTB22 := (TURNBACK_STATUS = 3) ;
ELSE
__EDTB22 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB22 ;
__EDTB24 := __EDTB22 ;
IF __EDTB24 THEN
POS_SET := (  TURNBACK_POS3) ;
END_IF ;
__MO_1GAIN_5 := __EDTB24 ;
__EDTB25 := __EDTB24 ;
IF __EDTB25 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_3 := __EDTB25 ;
__EDTB26 := __EDTB25 ;
IF __EDTB26 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_3 := __EDTB26 ;
__EDTB28 := __EDTB26 ;
IF __EDTB28 THEN
(* Operator output on : <= with __EDTB27 *)
__EDTB27 := (POS_ERROR_ABS <= POS_ERROR_THRESHOLD) ;
ELSE
__EDTB27 := FALSE ;
END_IF ;
__MO_LESSEQUAL_3 := __EDTB27 ;
__EDTB29 := __EDTB27 ;
IF __EDTB29 THEN
TURNBACK_STATUS := (  4) ;
END_IF ;
__MO_1GAIN_6 := __EDTB29 ;
__EDTB30 := __EDTB29 ;
__EDTB32 := __EDTB3 ;
IF __EDTB32 THEN
(* Operator output on : = with __EDTB31 *)
__EDTB31 := (TURNBACK_STATUS = 4) ;
ELSE
__EDTB31 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB31 ;
__EDTB33 := __EDTB31 ;
IF __EDTB33 THEN
POS_SET := (  POS_END) ;
END_IF ;
__MO_1GAIN_7 := __EDTB33 ;
__EDTB34 := __EDTB33 ;
IF __EDTB34 THEN
POS_ERROR := (POS_SET - POS_FEEDBACK) ;
END_IF ;
__MO_MINUS_4 := __EDTB34 ;
__EDTB35 := __EDTB34 ;
IF __EDTB35 THEN
POS_ERROR_ABS := ABS(POS_ERROR) ;
END_IF ;
__MO_ABS_4 := __EDTB35 ;
__EDTB37 := __EDTB35 ;
IF __EDTB37 THEN
(* Operator output on : <= with __EDTB36 *)
__EDTB36 := (POS_ERROR_ABS <= POS_ERROR_THRESHOLD) ;
ELSE
__EDTB36 := FALSE ;
END_IF ;
__MO_LESSEQUAL_4 := __EDTB36 ;
__EDTB38 := __EDTB36 ;
IF __EDTB38 THEN
TURNBACK_STATUS := (  1) ;
END_IF ;
__MO_1GAIN_8 := __EDTB38 ;
__EDTB39 := __EDTB38 ;
IF __EDTB39 THEN
POS_SET := (  TURNBACK_POS1) ;
END_IF ;
__MO_1GAIN_9 := __EDTB39 ;
__EDTB40 := __EDTB39 ;
IF __EDTB40 THEN
MOTOR_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_10 := __EDTB40 ;
__EDTB41 := __EDTB40 ;
__EDTB42 := (__EDTB30 OR __EDTB41) ;
__EDTB43 := (__EDTB21 OR __EDTB42) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB45 := ALL_ENABLE ;
IF __EDTB45 THEN
(* Operator output on : = with __EDTB44 *)
__EDTB44 := (ALL_STATUS = 2) ;
ELSE
__EDTB44 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB44 ;
__EDTB47 := __EDTB44 ;
IF __EDTB47 THEN
(* Operator output on : > with __EDTB46 *)
__EDTB46 := (POS_ERROR > 0.0) ;
ELSE
__EDTB46 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB46 ;
__EDTB48 := __EDTB46 ;
IF __EDTB48 THEN
MOTOR_ROTATEDIRECTION := (  FALSE) ;
END_IF ;
__MO_1GAIN_11 := __EDTB48 ;
__EDTB49 := __EDTB48 ;
__EDTB51 := __EDTB44 ;
IF __EDTB51 THEN
(* Operator output on : < with __EDTB50 *)
__EDTB50 := (POS_ERROR < 0.0) ;
ELSE
__EDTB50 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB50 ;
__EDTB52 := __EDTB50 ;
IF __EDTB52 THEN
MOTOR_ROTATEDIRECTION := (  TRUE) ;
END_IF ;
__MO_1GAIN_12 := __EDTB52 ;
__EDTB53 := __EDTB52 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB55 := ALL_ENABLE ;
IF __EDTB55 THEN
(* Operator output on : = with __EDTB54 *)
__EDTB54 := (ALL_STATUS = 2) ;
ELSE
__EDTB54 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB54 ;
__EDTB57 := __EDTB54 ;
IF __EDTB57 THEN
(* Operator output on : >= with __EDTB56 *)
__EDTB56 := (POS_ERROR_ABS >= 3.0) ;
ELSE
__EDTB56 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB56 ;
__EDTB58 := __EDTB56 ;
IF __EDTB58 THEN
POS_PID_ENABLE := (  FALSE) ;
END_IF ;
__MO_1GAIN_13 := __EDTB58 ;
__EDTB59 := __EDTB58 ;
IF __EDTB59 THEN
FREQUENCY_SET := (  40.0) ;
END_IF ;
__MO_1GAIN_14 := __EDTB59 ;
__EDTB60 := __EDTB59 ;
__EDTB62 := __EDTB54 ;
IF __EDTB62 THEN
(* Operator output on : < with __EDTB61 *)
__EDTB61 := (POS_ERROR_ABS < 3.0) ;
ELSE
__EDTB61 := FALSE ;
END_IF ;
__MO_LESS_2 := __EDTB61 ;
__EDTB63 := __EDTB61 ;
IF __EDTB63 THEN
POS_PID_ENABLE := (  TRUE) ;
END_IF ;
__MO_1GAIN_15 := __EDTB63 ;
__EDTB64 := __EDTB63 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB66 := ALL_ENABLE ;
IF __EDTB66 THEN
(* Operator output on : = with __EDTB65 *)
__EDTB65 := (ALL_STATUS = 2) ;
ELSE
__EDTB65 := FALSE ;
END_IF ;
__MO_EQUAL_8 := __EDTB65 ;
__EDTB68 := __EDTB65 ;
IF __EDTB68 THEN
(* Operator output on : = with __EDTB67 *)
__EDTB67 := (TURNBACK_STATUS = 1) ;
ELSE
__EDTB67 := FALSE ;
END_IF ;
__MO_EQUAL_9 := __EDTB67 ;
(* FB call: TON *)
TON_1(__EDTB67 AND MOTOR_ENABLE, T#10000S) ;
TIMER2_1_MS := TON_1.ET ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB70 := ALL_ENABLE ;
IF __EDTB70 THEN
(* Operator output on : = with __EDTB69 *)
__EDTB69 := (ALL_STATUS = 2) ;
ELSE
__EDTB69 := FALSE ;
END_IF ;
__MO_EQUAL_10 := __EDTB69 ;
__EDTB72 := __EDTB69 ;
IF __EDTB72 THEN
(* Operator output on : = with __EDTB71 *)
__EDTB71 := (TURNBACK_STATUS = 1) ;
ELSE
__EDTB71 := FALSE ;
END_IF ;
__MO_EQUAL_11 := __EDTB71 ;
__EDTB73 := __EDTB71 AND MOTOR_ENABLE ;
IF __EDTB73 THEN
TIMER2_1_REAL := ANY_TO_REAL(TIMER2_1_MS) ;
END_IF ;
__MO_ANY_TO_REAL_1 := __EDTB73 ;
__EDTB74 := __EDTB73 ;
IF __EDTB74 THEN
TIMER2_1_S := (TIMER2_1_REAL / 1000.0) ;
END_IF ;
__MO_DIV_1 := __EDTB74 ;
__EDTB76 := __EDTB74 ;
IF __EDTB76 THEN
(* Operator output on : <> with __EDTB75 *)
__EDTB75 := (ALL_STATUS <> 9) ;
ELSE
__EDTB75 := FALSE ;
END_IF ;
__MO_DIFF_1 := __EDTB75 ;
__EDTB77 := __EDTB75 ;
IF __EDTB77 THEN
TURNBACK_TIME1 := (  TIMER2_1_S) ;
END_IF ;
__MO_1GAIN_16 := __EDTB77 ;
__EDTB78 := __EDTB77 ;
__EDTB80 := ALL_ENABLE ;
IF __EDTB80 THEN
(* Operator output on : = with __EDTB79 *)
__EDTB79 := (ALL_STATUS = 9) ;
ELSE
__EDTB79 := FALSE ;
END_IF ;
__MO_EQUAL_12 := __EDTB79 ;
__EDTB81 := __EDTB79 ;
IF __EDTB81 THEN
TURNBACK_TIME1 := (  0.0) ;
END_IF ;
__MO_1GAIN_17 := __EDTB81 ;
__EDTB82 := __EDTB81 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB84 := ALL_ENABLE ;
IF __EDTB84 THEN
(* Operator output on : = with __EDTB83 *)
__EDTB83 := (ALL_STATUS = 2) ;
ELSE
__EDTB83 := FALSE ;
END_IF ;
__MO_EQUAL_13 := __EDTB83 ;
__EDTB86 := __EDTB83 ;
IF __EDTB86 THEN
(* Operator output on : = with __EDTB85 *)
__EDTB85 := (TURNBACK_STATUS = 2) ;
ELSE
__EDTB85 := FALSE ;
END_IF ;
__MO_EQUAL_14 := __EDTB85 ;
(* FB call: TON *)
TON_2(__EDTB85 AND MOTOR_ENABLE, T#10000S) ;
TIMER2_2_MS := TON_2.ET ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB88 := ALL_ENABLE ;
IF __EDTB88 THEN
(* Operator output on : = with __EDTB87 *)
__EDTB87 := (ALL_STATUS = 2) ;
ELSE
__EDTB87 := FALSE ;
END_IF ;
__MO_EQUAL_15 := __EDTB87 ;
__EDTB90 := __EDTB87 ;
IF __EDTB90 THEN
(* Operator output on : = with __EDTB89 *)
__EDTB89 := (TURNBACK_STATUS = 2) ;
ELSE
__EDTB89 := FALSE ;
END_IF ;
__MO_EQUAL_16 := __EDTB89 ;
__EDTB91 := __EDTB89 AND MOTOR_ENABLE ;
IF __EDTB91 THEN
TIMER2_2_REAL := ANY_TO_REAL(TIMER2_2_MS) ;
END_IF ;
__MO_ANY_TO_REAL_2 := __EDTB91 ;
__EDTB92 := __EDTB91 ;
IF __EDTB92 THEN
TIMER2_2_S := (TIMER2_2_REAL / 1000.0) ;
END_IF ;
__MO_DIV_2 := __EDTB92 ;
__EDTB94 := __EDTB92 ;
IF __EDTB94 THEN
(* Operator output on : <> with __EDTB93 *)
__EDTB93 := (ALL_STATUS <> 9) ;
ELSE
__EDTB93 := FALSE ;
END_IF ;
__MO_DIFF_2 := __EDTB93 ;
__EDTB95 := __EDTB93 ;
IF __EDTB95 THEN
TURNBACK_TIME2 := (  TIMER2_2_S) ;
END_IF ;
__MO_1GAIN_18 := __EDTB95 ;
__EDTB96 := __EDTB95 ;
__EDTB98 := ALL_ENABLE ;
IF __EDTB98 THEN
(* Operator output on : = with __EDTB97 *)
__EDTB97 := (ALL_STATUS = 9) ;
ELSE
__EDTB97 := FALSE ;
END_IF ;
__MO_EQUAL_17 := __EDTB97 ;
__EDTB99 := __EDTB97 ;
IF __EDTB99 THEN
TURNBACK_TIME2 := (  0.0) ;
END_IF ;
__MO_1GAIN_19 := __EDTB99 ;
__EDTB100 := __EDTB99 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB102 := ALL_ENABLE ;
IF __EDTB102 THEN
(* Operator output on : = with __EDTB101 *)
__EDTB101 := (ALL_STATUS = 2) ;
ELSE
__EDTB101 := FALSE ;
END_IF ;
__MO_EQUAL_18 := __EDTB101 ;
__EDTB104 := __EDTB101 ;
IF __EDTB104 THEN
(* Operator output on : = with __EDTB103 *)
__EDTB103 := (TURNBACK_STATUS = 3) ;
ELSE
__EDTB103 := FALSE ;
END_IF ;
__MO_EQUAL_19 := __EDTB103 ;
(* FB call: TON *)
TON_3(__EDTB103 AND MOTOR_ENABLE, T#10000S) ;
TIMER2_3_MS := TON_3.ET ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
(*Label :*)(**)
__EDTB106 := ALL_ENABLE ;
IF __EDTB106 THEN
(* Operator output on : = with __EDTB105 *)
__EDTB105 := (ALL_STATUS = 2) ;
ELSE
__EDTB105 := FALSE ;
END_IF ;
__MO_EQUAL_20 := __EDTB105 ;
__EDTB108 := __EDTB105 ;
IF __EDTB108 THEN
(* Operator output on : = with __EDTB107 *)
__EDTB107 := (TURNBACK_STATUS = 3) ;
ELSE
__EDTB107 := FALSE ;
END_IF ;
__MO_EQUAL_21 := __EDTB107 ;
__EDTB109 := __EDTB107 AND MOTOR_ENABLE ;
IF __EDTB109 THEN
TIMER2_3_REAL := ANY_TO_REAL(TIMER2_3_MS) ;
END_IF ;
__MO_ANY_TO_REAL_3 := __EDTB109 ;
__EDTB110 := __EDTB109 ;
IF __EDTB110 THEN
TIMER2_3_S := (TIMER2_3_REAL / 1000.0) ;
END_IF ;
__MO_DIV_3 := __EDTB110 ;
__EDTB112 := __EDTB110 ;
IF __EDTB112 THEN
(* Operator output on : <> with __EDTB111 *)
__EDTB111 := (ALL_STATUS <> 9) ;
ELSE
__EDTB111 := FALSE ;
END_IF ;
__MO_DIFF_3 := __EDTB111 ;
__EDTB113 := __EDTB111 ;
IF __EDTB113 THEN
TURNBACK_TIME3 := (  TIMER2_3_S) ;
END_IF ;
__MO_1GAIN_20 := __EDTB113 ;
__EDTB114 := __EDTB113 ;
__EDTB116 := ALL_ENABLE ;
IF __EDTB116 THEN
(* Operator output on : = with __EDTB115 *)
__EDTB115 := (ALL_STATUS = 9) ;
ELSE
__EDTB115 := FALSE ;
END_IF ;
__MO_EQUAL_22 := __EDTB115 ;
__EDTB117 := __EDTB115 ;
IF __EDTB117 THEN
TURNBACK_TIME3 := (  0.0) ;
END_IF ;
__MO_1GAIN_21 := __EDTB117 ;
__EDTB118 := __EDTB117 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __EDTB57 *)
(* __EDTB58 *)
(* __EDTB59 *)
(* __EDTB60 *)
(* __EDTB61 *)
(* __EDTB62 *)
(* __EDTB63 *)
(* __EDTB64 *)
(* __EDTB65 *)
(* __EDTB66 *)
(* __EDTB67 *)
(* __EDTB68 *)
(* __EDTB69 *)
(* __EDTB70 *)
(* __EDTB71 *)
(* __EDTB72 *)
(* __EDTB73 *)
(* __EDTB74 *)
(* __EDTB75 *)
(* __EDTB76 *)
(* __EDTB77 *)
(* __EDTB78 *)
(* __EDTB79 *)
(* __EDTB80 *)
(* __EDTB81 *)
(* __EDTB82 *)
(* __EDTB83 *)
(* __EDTB84 *)
(* __EDTB85 *)
(* __EDTB86 *)
(* __EDTB87 *)
(* __EDTB88 *)
(* __EDTB89 *)
(* __EDTB90 *)
(* __EDTB91 *)
(* __EDTB92 *)
(* __EDTB93 *)
(* __EDTB94 *)
(* __EDTB95 *)
(* __EDTB96 *)
(* __EDTB97 *)
(* __EDTB98 *)
(* __EDTB99 *)
(* __EDTB100 *)
(* __EDTB101 *)
(* __EDTB102 *)
(* __EDTB103 *)
(* __EDTB104 *)
(* __EDTB105 *)
(* __EDTB106 *)
(* __EDTB107 *)
(* __EDTB108 *)
(* __EDTB109 *)
(* __EDTB110 *)
(* __EDTB111 *)
(* __EDTB112 *)
(* __EDTB113 *)
(* __EDTB114 *)
(* __EDTB115 *)
(* __EDTB116 *)
(* __EDTB117 *)
(* __EDTB118 *)

